/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package muestreo;

import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import static muestreo.f.FCriticalValue;
import org.apache.commons.math3.distribution.ChiSquaredDistribution;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.distribution.NormalDistribution;
import org.apache.commons.math3.distribution.TDistribution;

/**
 *
 * @author JUAN CAMILO
 */
public class razonDeVarianzasP extends javax.swing.JFrame {

    /**
     * Creates new form mediaC1
     */
    public razonDeVarianzasP() {

        initComponents();
        superior.setEditable(false);
        inferior.setEditable(false);
        Interpretacion.setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        varianzaM1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        n1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        nc = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        superior = new javax.swing.JTextField();
        inferior = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        varianzaM2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        n2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        Interpretacion = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Intervalos de confianza para la razon de varianzas:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Intervalos de confianza para la razon de varianzas:");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Atras");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Ingrese los valores de las desviaciones muestrales:");

        varianzaM1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                varianzaM1KeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Ingrese el tamaño de la muestra:");

        n1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                n1KeyTyped(evt);
            }
        });

        jLabel6.setText("Ingrese el nivel de confianza porcentual:");

        nc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ncKeyTyped(evt);
            }
        });

        jLabel7.setText("Intervalo de confianza:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("≤(σ1^2)/(σ2^2)≤");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("%");

        jButton2.setText("Ingresar");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("Borrar");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jLabel1.setText("(S1)^2=");

        varianzaM2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                varianzaM2KeyTyped(evt);
            }
        });

        jLabel4.setText("(S2)^2=");

        n2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                n2KeyTyped(evt);
            }
        });

        jLabel10.setText("n1=");

        jLabel11.setText("n2=");

        Interpretacion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Interpretacion.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nc, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3))
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(varianzaM1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(varianzaM2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel10)
                                        .addComponent(jLabel11))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(n1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(n2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel5)
                            .addComponent(Interpretacion, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(inferior, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(superior, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(varianzaM1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(varianzaM2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(n1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(n2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(superior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(inferior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Interpretacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        this.dispose();
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        varianzaM1.setText(null);
        varianzaM2.setText(null);
        n1.setText(null);
        n2.setText(null);
        nc.setText(null);
        superior.setText(null);
        inferior.setText(null);
        Interpretacion.setText(null);
    }//GEN-LAST:event_jButton3MouseClicked
    public static double FProbability(double F, int df1, int df2) {

        int i, j;
        int a, b;
        double w, y, z, d, p;

        if ((Math.abs(F) < 10e-10) || df1 <= 0 || df2 <= 0) {
            return (1.0);
        }
        a = (df1 % 2 == 1) ? 1 : 2;
        b = (df2 % 2 == 1) ? 1 : 2;
        w = (F * df1) / df2;
        z = 1.0 / (1.0 + w);
        if (a == 1) {
            if (b == 1) {
                p = Math.sqrt(w);
                y = 1 / Math.PI;
                /* 1 / 3.14159 */
                d = y * z / p;
                p = 2.0 * y * Math.atan(p);
            } else {
                p = Math.sqrt(w * z);
                d = 0.5 * p * z / w;
            }
        } else if (b == 1) {
            p = Math.sqrt(z);
            d = 0.5 * z * p;
            p = 1.0 - p;
        } else {
            d = z * z;
            p = w * z;
        }
        y = 2.0 * w / z;
        for (j = b + 2; j <= df2; j += 2) {
            d *= (1.0 + a / (j - 2.0)) * z;
            p = (a == 1 ? p + d * y / (j - 1.0) : (p + w) * z);
        }
        y = w * z;
        z = 2.0 / z;
        b = df2 - 2;
        for (i = a + 2; i <= df1; i += 2) {
            j = i + b;
            d *= y * j / (i - 2.0);
            p -= z * d / j;
        }

        // correction for approximation errors suggested in certification
        if (p < 0.0) {
            p = 0.0;
        } else if (p > 1.0) {
            p = 1.0;
        }
        return (1.0 - p);
    }

    public static double FCriticalValue(double p, int df1, int df2) {

        double fval;
        double maxf = 99999.0;
        /* maximum possible F ratio */
        double minf = .000001;
        /* minimum possible F ratio */

        if (p <= 0.0 || p >= 1.0) {
            return (0.0);
        }

        fval = 1.0 / p;
        /* the smaller the p, the larger the F */

        while (Math.abs(maxf - minf) > .000001) {
            if (FProbability(fval, df1, df2) < p) /* F too large */ {
                maxf = fval;
            } else /* F too small */ {
                minf = fval;
            }
            fval = (maxf + minf) * 0.5;
        }

        return (fval);
    }

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        try {
            double varianza1;
            double varianza2;
            double tamaño1;
            double tamaño2;
            double nivelc;

            if ((varianzaM1.getText().length() == 0) || (varianzaM2.getText().length() == 0) || (n1.getText().length() == 0) || (n2.getText().length() == 0)) {
                //emite señal de error
                getToolkit().beep();
                JOptionPane.showMessageDialog(this, "Ingrese ambos valores de la varianza y tamaños muestrales para poder hallar el intervalo de confianza", "Error de Campo vacio", JOptionPane.ERROR_MESSAGE);

            } else if ((Double.parseDouble(n1.getText()) < 1) || (Double.parseDouble(n2.getText()) < 1)) {
                //emite señal de error
                getToolkit().beep();
                JOptionPane.showMessageDialog(this, "No se pueden tener muetras de tamaño 0 o menos", "tamaño de la muestra no valido", JOptionPane.ERROR_MESSAGE);

            } else {

                //DecimalFormat df = new DecimalFormat("0.00000");
                varianza1 = Double.parseDouble(varianzaM1.getText());
                varianza2 = Double.parseDouble(varianzaM2.getText());
                tamaño1 = Double.parseDouble(n1.getText());
                tamaño2 = Double.parseDouble(n2.getText());

                if ((nc.getText().length() == 0)) {
                    JOptionPane.showMessageDialog(this, "se tomara 95% como nivel de confianza", "Nivel de confianza", HEIGHT);
                    nivelc = 95;
                } else {
                    nivelc = Double.parseDouble(nc.getText());
                }

                if ((nivelc > 100) || (nivelc < 0)) {
                    //emite señal de error
                    getToolkit().beep();
                    JOptionPane.showMessageDialog(this, "No es valido tener un nivel de confianza mayor a 100% o menor al 0%", "Nivel de confianza no valido", JOptionPane.ERROR_MESSAGE);

                } else {

                    double porcentaje;
                    porcentaje = nivelc / 100;

                    double alfa2 = (1 - porcentaje) / 2;

                    //////////////////
                    double sup;
                    double inf;
                    double v1 = tamaño1 - 1;
                    double v2 = tamaño2 - 1;

                    System.out.println(FCriticalValue(alfa2, (int) v1, (int) v2));

                    sup = (varianza1 / varianza2) * (FCriticalValue(alfa2, (int) v1, (int) v2));
                    inf = (varianza1 / varianza2) * (1 / ((FCriticalValue(alfa2, (int) v1, (int) v2))));

                    superior.setText(String.valueOf(sup));
                    inferior.setText(String.valueOf(inf));

                    dif_med_c2 dm2 = new dif_med_c2();
                    dif_med_c3 dm3 = new dif_med_c3();

                    if ((sup > 1) && (inf > 1)) {
                        Interpretacion.setText("La desviacion estandar poblacional 1 es mas grande que la desviacion estandar poblacional 2.Hacer caso 3 para hallar la diferencia de medias poblacionales.");
                        dm3.setVisible(true);
                    } else if ((sup < 1) && (inf < 1)) {
                        Interpretacion.setText("La desviacion estandar poblacional 2 es mas grande que la desviacion estandar poblacional 1. Hacer caso 3 para hallar la diferencia de medias poblacionales.");
                        dm3.setVisible(true);
                    } else {
                        Interpretacion.setText("Se puede decir que la desviacion estandar poblacional 1 es igual a la desviacion estandar poblacional 2. Hacer caso 2 para hallar la diferencia de medias poblacionales.");
                        dm2.setVisible(true);
                    }

                }

            }
        } catch (Exception e) {

            JOptionPane.showMessageDialog(this, "Hay un dato invalido", "Error con algun dato mal ingresado", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_jButton2MouseClicked

    private void varianzaM1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_varianzaM1KeyTyped
        //declaro unba variable de tipo char y le digo que me devuelva solo los valores que le diga que me retorne
        char c = evt.getKeyChar();
        //si el char es una letra
        if (Character.isLetter(c)) {
            //emite señal de error
            getToolkit().beep();
            //no deja escribir
            evt.consume();
            //muestra el siguiente mensaje
            JOptionPane.showMessageDialog(this, "Solo ingresa numeros en este campo", "Error de compativilidad", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_varianzaM1KeyTyped

    private void n1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_n1KeyTyped
        //declaro unba variable de tipo char y le digo que me devuelva solo los valores que le diga que me retorne
        char c = evt.getKeyChar();
        //si el char es una letra
        if (Character.isLetter(c)) {
            //emite señal de error
            getToolkit().beep();
            //no deja escribir
            evt.consume();
            //muestra el siguiente mensaje
            JOptionPane.showMessageDialog(this, "Solo ingresa numeros en este campo", "Error de compativilidad", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_n1KeyTyped

    private void ncKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ncKeyTyped
        //declaro unba variable de tipo char y le digo que me devuelva solo los valores que le diga que me retorne
        char c = evt.getKeyChar();
        //si el char es una letra
        if (Character.isLetter(c)) {
            //emite señal de error
            getToolkit().beep();
            //no deja escribir
            evt.consume();
            //muestra el siguiente mensaje
            JOptionPane.showMessageDialog(this, "Solo ingresa numeros en este campo", "Error de compativilidad", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_ncKeyTyped

    private void varianzaM2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_varianzaM2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_varianzaM2KeyTyped

    private void n2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_n2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_n2KeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Interpretacion;
    private javax.swing.JTextField inferior;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField n1;
    private javax.swing.JTextField n2;
    private javax.swing.JTextField nc;
    private javax.swing.JTextField superior;
    private javax.swing.JTextField varianzaM1;
    private javax.swing.JTextField varianzaM2;
    // End of variables declaration//GEN-END:variables
}
