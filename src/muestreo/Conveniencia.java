/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package muestreo;

import com.sun.org.apache.bcel.internal.generic.AALOAD;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JUAN CAMILO
 */
public class Conveniencia extends javax.swing.JFrame {

    //variables
    ArrayList<dato> datos;
    ArrayList<dato> muestra;
    DefaultTableModel modelo;
    JScrollPane scrollpane;
    dato dato;
    int tamañoMuestra;
    int con = 0;

    /**
     * Creates new form Simple
     */
    public Conveniencia(ArrayList datos) {
        initComponents();

        //propiedades del los jtextfile que mostraran los datos
        mm.setText(null);
        dm.setText(null);
        vm.setText(null);

        mm.setEditable(false);
        dm.setEditable(false);
        vm.setEditable(false);

        this.datos = datos;
        this.tamañoMuestra = tamañoMuestra;
        this.muestra = new ArrayList<>();
        tabla();

        //sacar datos muestrales
        if (!this.muestra.isEmpty()) {

            mm.setText(null);
            dm.setText(null);
            vm.setText(null);
            //System.out.println(this.datos.size());
            while (!this.muestra.isEmpty()) {

                this.muestra.remove(0);
                this.modelo.removeRow(0);

            }
            //System.out.println(this.datos.size());
        }

    }

    //creo la estructura de la tabal y se la asigno
    private void tabla() {

        String x[][] = {};
        //creo los titulos de las columnas de la tabla
        String columnas[] = {"numeracion", "Sujeto", "Edad"};

        //hago qe mi tabla tenga la estructura de filas vacias y las columnas como titulo lo que ingrese en el string columnas
        //modifico el default table model para hacer que nadie pueda editar directamente las celdas
        modelo = new DefaultTableModel(x, columnas) {

            @Override
            public boolean isCellEditable(int row, int col) {

                return false;
            }

        };

        //le doy una estructura a mi tabla modelo
        tablaS.setModel(modelo);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaS = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        vm = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        mm = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        dm = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        numero = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Muestreo aleatorio simple");

        tablaS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaS);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Atras");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("Salir");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        vm.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel1.setText("Media muestral:");

        mm.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        mm.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jLabel2.setText("Desviacion muestral:");

        dm.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel3.setText("Varianza muestral:");

        numero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numeroKeyTyped(evt);
            }
        });

        jLabel4.setText("Ingresar dato #:");

        jButton3.setText("Agregar");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setText("Eliminar");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(mm, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(vm, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dm, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(numero, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3)
                            .addComponent(jButton4))
                        .addGap(0, 38, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked

        this.dispose();
        this.setVisible(false);

    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        this.dispose();
        System.exit(1);
    }//GEN-LAST:event_jButton2MouseClicked

    private void numeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numeroKeyTyped

        //declaro unba variable de tipo char y le digo que me devuelva solo los valores que le diga que me retorne
        char c = evt.getKeyChar();
        //si el char es una letra
        if (Character.isLetter(c)) {
            //emite señal de error
            getToolkit().beep();
            //no deja escribir
            evt.consume();
            //muestra el siguiente mensaje
            JOptionPane.showMessageDialog(this, "Solo ingresa numeros en este campo", "Error de compativilidad", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_numeroKeyTyped

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked

        //sacar datos muestrales
        if (!this.muestra.isEmpty()) {

            mm.setText(null);
            dm.setText(null);
            vm.setText(null);
            //System.out.println(this.datos.size());

            int a = modelo.getRowCount() - 1;
            for (int i = a; i >= 0; i--) {
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            //System.out.println(this.datos.size());
        }
        this.tamañoMuestra = this.muestra.size();
        boolean prueba = false;
        if (numero.getText() == null) {
            //emite señal de error
            getToolkit().beep();
            //no deja escribir
            //muestra el siguiente mensaje
            JOptionPane.showMessageDialog(this, "Ingresa un valor para poder agregarlo", "Campo vacio", JOptionPane.ERROR_MESSAGE);
        }
        for (int i = 0; i < this.datos.size(); i++) {
            if (Integer.parseInt(numero.getText()) == this.datos.get(i).getNumeracion()) {
                prueba = true;
            }
        }
        if (prueba == false) {

            this.con = 0;
            for (int i = 0; i < this.muestra.size(); i++) {
                //le digo a la tabla que me agrege filas segun vaya aumentando el contador
                modelo.insertRow(con, new Object[]{});
                modelo.setValueAt(i + 1, con, 0);
                modelo.setValueAt(this.muestra.get(i).getNumeracion(), con, 1);
                modelo.setValueAt(this.muestra.get(i).getDato(), con, 2);
                con++;
            }

            //calculos muestrales
            double mediaMuestral;
            double desviacionMuestral;
            double varianzaMuestral;
            double suma = 0;

            //media muestrales
            for (int i = 0; i < this.muestra.size(); i++) {

                suma = suma + this.muestra.get(i).getDato();

            }
            mediaMuestral = suma / this.tamañoMuestra;

            //desviacion muestrales
            double suma2 = 0;

            for (int i = 0; i < this.muestra.size(); i++) {

                suma2 = suma2 + Math.pow(this.muestra.get(i).getDato() - mediaMuestral, 2);

            }

            desviacionMuestral = (double) Math.sqrt(suma2 / (this.tamañoMuestra - 1));

            //varianza muestrales
            varianzaMuestral = Math.pow(desviacionMuestral, 2);

            //asignacion de resultados
            mm.setText(String.valueOf(mediaMuestral));
            dm.setText(String.valueOf(desviacionMuestral));
            vm.setText(String.valueOf(varianzaMuestral));
            //emite señal de error
            getToolkit().beep();
            //no deja escribir
            //muestra el siguiente mensaje
            JOptionPane.showMessageDialog(this, "Ingresa un valor que este en la poblacion", "valor no encontrado", JOptionPane.ERROR_MESSAGE);
        } else {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            boolean permiso = true;
            for (int i = 0; i < this.muestra.size(); i++) {

                if (Integer.parseInt(numero.getText()) == (this.muestra.get(i).getNumeracion())) {
                    permiso = false;
                }

            }
            if (permiso == true) {
                this.muestra.add(this.datos.get(Integer.parseInt(numero.getText()) - 1));
                this.con = 0;
                for (int i = 0; i < this.muestra.size(); i++) {
                    //le digo a la tabla que me agrege filas segun vaya aumentando el contador
                    modelo.insertRow(con, new Object[]{});
                    modelo.setValueAt(i + 1, con, 0);
                    modelo.setValueAt(this.muestra.get(i).getNumeracion(), con, 1);
                    modelo.setValueAt(this.muestra.get(i).getDato(), con, 2);
                    con++;
                }

                //calculos muestrales
                double mediaMuestral;
                double desviacionMuestral;
                double varianzaMuestral;
                double suma = 0;

                //media muestrales
                for (int i = 0; i < this.muestra.size(); i++) {

                    suma = suma + this.muestra.get(i).getDato();

                }
                mediaMuestral = suma / this.tamañoMuestra;

                //desviacion muestrales
                double suma2 = 0;

                for (int i = 0; i < this.muestra.size(); i++) {

                    suma2 = suma2 + Math.pow(this.muestra.get(i).getDato() - mediaMuestral, 2);

                }

                desviacionMuestral = (double) Math.sqrt(suma2 / (this.tamañoMuestra - 1));

                //varianza muestrales
                varianzaMuestral = Math.pow(desviacionMuestral, 2);

                //asignacion de resultados
                mm.setText(String.valueOf(mediaMuestral));
                dm.setText(String.valueOf(desviacionMuestral));
                vm.setText(String.valueOf(varianzaMuestral));
            } else {

                this.con = 0;
                for (int i = 0; i < this.muestra.size(); i++) {
                    //le digo a la tabla que me agrege filas segun vaya aumentando el contador
                    modelo.insertRow(con, new Object[]{});
                    modelo.setValueAt(i + 1, con, 0);
                    modelo.setValueAt(this.muestra.get(i).getNumeracion(), con, 1);
                    modelo.setValueAt(this.muestra.get(i).getDato(), con, 2);
                    con++;
                }

                //calculos muestrales
                double mediaMuestral;
                double desviacionMuestral;
                double varianzaMuestral;
                double suma = 0;

                //media muestrales
                for (int i = 0; i < this.muestra.size(); i++) {

                    suma = suma + this.muestra.get(i).getDato();

                }
                mediaMuestral = suma / this.tamañoMuestra;

                //desviacion muestrales
                double suma2 = 0;

                for (int i = 0; i < this.muestra.size(); i++) {

                    suma2 = suma2 + Math.pow(this.muestra.get(i).getDato() - mediaMuestral, 2);

                }

                desviacionMuestral = (double) Math.sqrt(suma2 / (this.tamañoMuestra - 1));

                //varianza muestrales
                varianzaMuestral = Math.pow(desviacionMuestral, 2);

                //asignacion de resultados
                mm.setText(String.valueOf(mediaMuestral));
                dm.setText(String.valueOf(desviacionMuestral));
                vm.setText(String.valueOf(varianzaMuestral));
                //emite señal de error
                getToolkit().beep();
                //no deja escribir
                //muestra el siguiente mensaje
                JOptionPane.showMessageDialog(this, "Sujeto ya se encuentra en la muestra", "Sujeto repetido", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // declaro una variable y le asigno la capacidad de seleccopmar un elemento de mi tabla
        int filaSeleccionada = tablaS.getSelectedRow();
        //coloco un try catch en la parte del codigo que me puede generar cualquier tipo de error
        try {
            //si no se ha seleccionado ningun elemento me hace esto, porque -1 significa ninguno para este comando
            if (filaSeleccionada == -1) {
                //emite señal de error
                getToolkit().beep();
                //muestra este mensaje
                JOptionPane.showMessageDialog(this, "debes seleccionar una fila", "sin seleccion", JOptionPane.ERROR_MESSAGE);
                //de lo contrario   
            } else {
                //declaro una variable y le asigno la capacidad de mostrarme un cuadro de confirmacion
                int confirmacion = JOptionPane.showConfirmDialog(tablaS, "¿Estas seguro que desea eliminar el dato " + tablaS.getValueAt(filaSeleccionada, 0).toString() + " ? ", "Confirmacion", JOptionPane.ERROR_MESSAGE);
                //si la respuesta del cuadro de confirmacion es postiva me deve hacer lo siguiente
                if (confirmacion == JOptionPane.YES_OPTION) {

                    modelo.removeRow(filaSeleccionada);
                    this.muestra.remove(filaSeleccionada);
                    JOptionPane.showMessageDialog(this, "fila eliminada exitosamente");

                }

            }

            //calculos muestrales
            this.tamañoMuestra = this.muestra.size();
            double mediaMuestral;
            double desviacionMuestral;
            double varianzaMuestral;
            double suma = 0;

            //media muestrales
            for (int i = 0; i < this.muestra.size(); i++) {

                suma = suma + this.muestra.get(i).getDato();

            }
            mediaMuestral = suma / this.tamañoMuestra;

            //desviacion muestrales
            double suma2 = 0;

            for (int i = 0; i < this.muestra.size(); i++) {

                suma2 = suma2 + Math.pow(this.muestra.get(i).getDato() - mediaMuestral, 2);

            }

            desviacionMuestral = (double) Math.sqrt(suma2 / (this.tamañoMuestra - 1));

            //varianza muestrales
            varianzaMuestral = Math.pow(desviacionMuestral, 2);

            //asignacion de resultados
            mm.setText(String.valueOf(mediaMuestral));
            dm.setText(String.valueOf(desviacionMuestral));
            vm.setText(String.valueOf(varianzaMuestral));

            //excepcion general
        } catch (Exception e) {

        }

    }//GEN-LAST:event_jButton4MouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dm;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mm;
    private javax.swing.JTextField numero;
    private javax.swing.JTable tablaS;
    private javax.swing.JTextField vm;
    // End of variables declaration//GEN-END:variables
}
