/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package muestreo;

import java.awt.Image;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import java.lang.NumberFormatException;
import javax.swing.JMenuBar;

/**
 *
 * @author JUAN CAMILO
 */
public class Menu extends javax.swing.JFrame {

    ArrayList<dato> poblacion;
    ArrayList<intervalo> intervalo;
    dato dato;
    DefaultTableModel modelo;
    JScrollPane scrollpane;
    int con = 0;

    public Menu() {

        initComponents();

        //propiedades del los jtextfile que mostraran los datos
        mp.setText(null);
        dp.setText(null);
        vp.setText(null);

        mp.setEditable(false);
        dp.setEditable(false);
        vp.setEditable(false);

        //array list que permiten manipular datos
        this.poblacion = new ArrayList<>();
        this.intervalo = new ArrayList<>();

        tabla();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Seleccionar_datos = new javax.swing.JButton();
        Salir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaP = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        mp = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        dp = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        vp = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        metodos = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        Estrato = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenu11 = new javax.swing.JMenu();
        jMenu12 = new javax.swing.JMenu();
        jMenu13 = new javax.swing.JMenu();
        jMenu14 = new javax.swing.JMenu();
        jMenu15 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Seleccionar_datos.setText("Seleccionar poblacion");
        Seleccionar_datos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Seleccionar_datosMouseClicked(evt);
            }
        });

        Salir.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Salir.setText("Salir");
        Salir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SalirMouseClicked(evt);
            }
        });
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        tablaP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaP);

        jLabel1.setText("Media poblacional:");

        mp.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        mp.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jLabel2.setText("Desviacion poblacional:");

        dp.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jLabel3.setText("Varianza poblacional:");

        vp.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        jButton1.setText("Calculos muestrales");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel4.setText("Tipo de muestra:");

        metodos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Simple", "Sistematico", "Clongomerado", "Estratificado", "Conveniencia", "Cuotas", "Bola de nieve" }));

        Estrato.setText("Estrato");
        Estrato.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EstratoMouseClicked(evt);
            }
        });
        jMenuBar1.add(Estrato);

        jMenu2.setText("Distribuciones");

        jMenu1.setText("Distribucion Normal");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenu2.add(jMenu1);

        jMenu3.setText("Distribucion Tstudent");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenu2.add(jMenu3);

        jMenu4.setText("Distribucion chi^2");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenu2.add(jMenu4);

        jMenu5.setText("Distribucion f");
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu5MouseClicked(evt);
            }
        });
        jMenu2.add(jMenu5);

        jMenuBar1.add(jMenu2);

        jMenu6.setText("Intervalos de confianza");

        jMenu7.setText("Media caso 1:");
        jMenu7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu7MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu7);

        jMenu8.setText("Media caso 2:");
        jMenu8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu8MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu8);

        jMenu9.setText("Proporcion:");
        jMenu9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu9MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu9);

        jMenu10.setText("Varianza:");
        jMenu10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu10MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu10);

        jMenu11.setText("Diferencia de medias caso 1:");
        jMenu11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu11MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu11);

        jMenu12.setText("Diferencia de medias caso 2:");
        jMenu12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu12MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu12);

        jMenu13.setText("Diferencia de medias caso 3:");
        jMenu13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu13MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu13);

        jMenu14.setText("Diferencia de proporciones:");
        jMenu14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu14MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu14);

        jMenu15.setText("Razon de varianzas poblacionales");
        jMenu15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu15MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu15);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(Salir))
                    .addComponent(metodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel4)
                    .addComponent(Seleccionar_datos)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(mp, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(vp, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dp, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Salir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Seleccionar_datos)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(metodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //creo la estructura de la tabal y se la asigno
    private void tabla() {

        String x[][] = {};
        //creo los titulos de las columnas de la tabla
        String columnas[] = {"Sujeto", "Edad"};

        //hago qe mi tabla tenga la estructura de filas vacias y las columnas como titulo lo que ingrese en el string columnas
        //modifico el default table model para hacer que nadie pueda editar directamente las celdas
        modelo = new DefaultTableModel(x, columnas) {

            @Override
            public boolean isCellEditable(int row, int col) {

                return false;
            }

        };

        //le doy una estructura a mi tabla modelo
        tablaP.setModel(modelo);

    }


    private void Seleccionar_datosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Seleccionar_datosMouseClicked

        if (!this.poblacion.isEmpty()) {
            //System.out.println(this.datos.size());
            mp.setText(null);
            dp.setText(null);
            vp.setText(null);
            while (!this.poblacion.isEmpty()) {

                this.poblacion.remove(0);
                this.modelo.removeRow(0);

            }
            //System.out.println(this.datos.size());
        }

        if (this.poblacion.isEmpty()) {
            //agrego los datos de mis variables a un miembro unico de mi poblacion
            leer_Archivo leer = new leer_Archivo();
            this.poblacion = leer.presentar();

            for (int i = 0; i < this.poblacion.size(); i++) {
                System.out.println(this.poblacion.get(i).getNumeracion() + " " + this.poblacion.get(i).getDato());
            }

            this.con = 0;
            for (int i = 0; i < this.poblacion.size(); i++) {
                //le digo a la tabla que me agrege filas segun vaya aumentando el contador
                modelo.insertRow(con, new Object[]{});
                modelo.setValueAt(this.poblacion.get(i).getNumeracion(), con, 0);
                modelo.setValueAt(this.poblacion.get(i).getDato(), con, 1);
//                modelo.setValueAt(this.poblacion.get(i).getGenero(), con, 2);
//                modelo.setValueAt(this.poblacion.get(i).getColordeojos(), con, 3);
//                modelo.setValueAt(this.poblacion.get(i).getEstrato(), con, 4);
//                modelo.setValueAt(this.poblacion.get(i).getTamaño(), con, 5);
//                

                con++;

            }
        }

        //calculos poblacionales
        double mediaPoblacional;
        double desviacionPoblacional;
        double varianzaPoblacional;
        int tamañoPoblacional = this.poblacion.size();
        double suma = 0;

        //media poblacional
        for (int i = 0; i < this.poblacion.size(); i++) {

            suma = suma + this.poblacion.get(i).getDato();

        }
        mediaPoblacional = suma / tamañoPoblacional;

        //desviacion poblacional
        double suma2 = 0;

        for (int i = 0; i < this.poblacion.size(); i++) {

            suma2 = suma2 + Math.pow(this.poblacion.get(i).getDato() - mediaPoblacional, 2);

        }

        desviacionPoblacional = (double) Math.sqrt(suma2 / tamañoPoblacional);

        //varianza poblacional
        varianzaPoblacional = Math.pow(desviacionPoblacional, 2);

        //asignacion de resultados
        mp.setText(String.valueOf(mediaPoblacional));
        dp.setText(String.valueOf(desviacionPoblacional));
        vp.setText(String.valueOf(varianzaPoblacional));

    }//GEN-LAST:event_Seleccionar_datosMouseClicked

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SalirActionPerformed

    private void SalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SalirMouseClicked
        this.dispose();
        System.exit(1);
    }//GEN-LAST:event_SalirMouseClicked


    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked

        if (this.poblacion.isEmpty()) {

            try {
                //emite señal de error
                getToolkit().beep();
                //mensaje de error or poblacion vacia
                JOptionPane.showMessageDialog(null, "Poblacion vacia\nnecesitas tener una poblacion a la cual sacarle muestra", "Poblacion vacia", JOptionPane.ERROR_MESSAGE);

            } catch (Exception e) {

                System.out.println("Error al leer el icono");

            }
        } else {

            int tamañoMuestra = 0;
            boolean comprobar = false;

            if (((String) metodos.getSelectedItem()).equals("Simple")) {

                do {
                    //emite señal de error
                    getToolkit().beep();
                    try {
                        tamañoMuestra = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "Ingresa la cantidad de la muestra\n(Deve ser menor o igual que el amaño de la poblacion)"));
                        comprobar = true;
                    } catch (NumberFormatException e) {

                        //emite señal de error
                        getToolkit().beep();
                        JOptionPane.showMessageDialog(null, "El tamaño de la muestra deve ser un entero\nintentelo de nuevo", "Tipo de dato incorrecto", JOptionPane.ERROR_MESSAGE);
                        comprobar = false;

                    }
                } while ((tamañoMuestra > this.poblacion.size()) || (comprobar == false));

                Simple simple = new Simple(this.poblacion, tamañoMuestra);
                simple.setVisible(true);

            } else if (((String) metodos.getSelectedItem()).equals("Sistematico")) {

                do {
                    //emite señal de error
                    getToolkit().beep();
                    try {
                        tamañoMuestra = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "Ingresa la cantidad de la muestra\n(Deve ser menor o igual que el amaño de la poblacion)"));
                        comprobar = true;
                    } catch (NumberFormatException e) {

                        //emite señal de error
                        getToolkit().beep();
                        JOptionPane.showMessageDialog(null, "El tamaño de la muestra deve ser un entero\nintentelo de nuevo", "Tipo de dato incorrecto", JOptionPane.ERROR_MESSAGE);
                        comprobar = false;

                    }
                } while ((tamañoMuestra > this.poblacion.size()) || (comprobar == false));

                Sistematico Sistematico = new Sistematico(this.poblacion, tamañoMuestra);
                Sistematico.setVisible(true);

            } else if (((String) metodos.getSelectedItem()).equals("Estratificado")) {

                if (this.intervalo.size() == 0) {

                    try {
                        //emite señal de error
                        getToolkit().beep();
                        //mensaje de error or poblacion vacia
                        JOptionPane.showMessageDialog(null, "Deves establecer algun Estrato", "Sin estratos", JOptionPane.ERROR_MESSAGE);

                    } catch (Exception e) {

                    }

                } else {

                    do {
                        //emite señal de error
                        getToolkit().beep();
                        try {
                            tamañoMuestra = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "Ingresa la cantidad de la muestra\n(Deve ser menor o igual que el tamaño de la poblacion)"));
                            comprobar = true;
                        } catch (NumberFormatException e) {

                            //emite señal de error
                            getToolkit().beep();
                            JOptionPane.showMessageDialog(null, "El tamaño de la muestra deve ser un entero\nintentelo de nuevo", "Tipo de dato incorrecto", JOptionPane.ERROR_MESSAGE);
                            comprobar = false;

                        }
                    } while ((tamañoMuestra > this.poblacion.size()) || (comprobar == false));
                    int cantidad = (int) (tamañoMuestra / this.intervalo.size());

                    Estratificado Estratificado = new Estratificado(this.poblacion, this.intervalo, tamañoMuestra, cantidad);
                    Estratificado.setVisible(true);
                }

            } else if (((String) metodos.getSelectedItem()).equals("Conveniencia")) {

                Conveniencia conveniencia = new Conveniencia(poblacion);
                conveniencia.setVisible(true);
            } else if (((String) metodos.getSelectedItem()).equals("Bola de nieve")) {

                int numero1 = 0;

                do {
                    //emite señal de error
                    getToolkit().beep();
                    try {
                        tamañoMuestra = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "Ingresa la cantidad de la muestra\n(Deve ser menor o igual que el tamaño de la poblacion y mayor que 0)"));
                        comprobar = true;
                    } catch (NumberFormatException e) {

                        //emite señal de error
                        getToolkit().beep();
                        JOptionPane.showMessageDialog(null, "El tamaño de la muestra deve ser un entero\nintentelo de nuevo", "Tipo de dato incorrecto", JOptionPane.ERROR_MESSAGE);
                        comprobar = false;

                    }
                } while ((tamañoMuestra > this.poblacion.size()) || (comprobar == false) || (tamañoMuestra <= 0));

                boolean comprobar2 = false;
                do {
                    //emite señal de error
                    getToolkit().beep();
                    try {
                        numero1 = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "Ingresa el numero del dato que desea escoger como primer elemento)"));
                        comprobar = true;

                        for (int i = 0; i < this.poblacion.size(); i++) {

                            if (numero1 == this.poblacion.get(i).getNumeracion()) {
                                comprobar2 = true;
                                break;
                            }

                        }

                        if (comprobar2 == false) {
                            //emite señal de error
                            getToolkit().beep();
                            JOptionPane.showMessageDialog(null, "El elemento no se encuentra en la poblacion\nIntentelo de nuevo con otro valor\nintentelo de nuevo", "Dato no encontrado", JOptionPane.ERROR_MESSAGE);

                        }
                    } catch (NumberFormatException e) {

                        //emite señal de error
                        getToolkit().beep();
                        JOptionPane.showMessageDialog(null, "El tamaño de la muestra deve ser un entero\nintentelo de nuevo", "Tipo de dato incorrecto", JOptionPane.ERROR_MESSAGE);
                        comprobar = false;

                    }
                } while ((comprobar2 == false));

                Bola_de_nieve bolaDeNieve = new Bola_de_nieve(poblacion, tamañoMuestra, numero1);
                bolaDeNieve.setVisible(true);
            } else if (((String) metodos.getSelectedItem()).equals("Cuotas")) {

                if (this.intervalo.size() == 0) {

                    try {
                        //emite señal de error
                        getToolkit().beep();
                        //mensaje de error or poblacion vacia
                        JOptionPane.showMessageDialog(null, "Deves establecer algun cuota en el menu de estratos", "Sin cuotas", JOptionPane.ERROR_MESSAGE);

                    } catch (Exception e) {

                    }

                } else {

                    do {
                        //emite señal de error
                        getToolkit().beep();
                        try {
                            tamañoMuestra = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "Ingresa la cantidad de la muestra\n(Deve ser menor o igual que el tamaño de la poblacion)"));
                            comprobar = true;
                        } catch (NumberFormatException e) {

                            //emite señal de error
                            getToolkit().beep();
                            JOptionPane.showMessageDialog(null, "El tamaño de la muestra deve ser un entero\nintentelo de nuevo", "Tipo de dato incorrecto", JOptionPane.ERROR_MESSAGE);
                            comprobar = false;

                        }
                    } while ((tamañoMuestra > this.poblacion.size()) || (comprobar == false));
                    int cantidad = (int) (tamañoMuestra / this.intervalo.size());

                    Cuotas cuo = new Cuotas(this.poblacion, this.intervalo, tamañoMuestra, cantidad);
                    cuo.setVisible(true);
                }
            }

        }

    }//GEN-LAST:event_jButton1MouseClicked

    private void EstratoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EstratoMouseClicked
        if (!this.poblacion.isEmpty()) {
            Estratos estrato = new Estratos(this.intervalo, this.poblacion);
            estrato.setVisible(true);
        } else {
            //emite señal de error
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Debe seleccionar una poblacion para poderla estratificar", "Poblacion vacia", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_EstratoMouseClicked

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        Z pz = new Z();
        pz.setVisible(true);
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        tstudent ts = new tstudent();
        ts.setVisible(true);

    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        chi2 chi = new chi2();
        chi.setVisible(true);
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu5MouseClicked
        f df = new f();
        df.setVisible(true);
    }//GEN-LAST:event_jMenu5MouseClicked

    private void jMenu7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu7MouseClicked
        mediaC1 mc1 = new mediaC1();
        mc1.setVisible(true);
    }//GEN-LAST:event_jMenu7MouseClicked

    private void jMenu8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu8MouseClicked
        mediaC2 mc2 = new mediaC2();
        mc2.setVisible(true);
    }//GEN-LAST:event_jMenu8MouseClicked

    private void jMenu9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu9MouseClicked
        proporcion pro = new proporcion();
        pro.setVisible(true);
    }//GEN-LAST:event_jMenu9MouseClicked

    private void jMenu10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu10MouseClicked
        varianza var = new varianza();
        var.setVisible(true);
    }//GEN-LAST:event_jMenu10MouseClicked

    private void jMenu11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu11MouseClicked
        dif_med_c1 dm1 = new dif_med_c1();
        dm1.setVisible(true);
    }//GEN-LAST:event_jMenu11MouseClicked

    private void jMenu12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu12MouseClicked
        dif_med_c2 dm2 = new dif_med_c2();
        dm2.setVisible(true);
    }//GEN-LAST:event_jMenu12MouseClicked

    private void jMenu13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu13MouseClicked
        dif_med_c3 dm3 = new dif_med_c3();
        dm3.setVisible(true);
    }//GEN-LAST:event_jMenu13MouseClicked

    private void jMenu14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu14MouseClicked
        dif_prop dp = new dif_prop();
        dp.setVisible(true);
    }//GEN-LAST:event_jMenu14MouseClicked

    private void jMenu15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu15MouseClicked
        razonDeVarianzasP rvp = new razonDeVarianzasP();
        rvp.setVisible(true);
    }//GEN-LAST:event_jMenu15MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Estrato;
    private javax.swing.JButton Salir;
    private javax.swing.JButton Seleccionar_datos;
    private javax.swing.JTextField dp;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu15;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> metodos;
    private javax.swing.JTextField mp;
    private javax.swing.JTable tablaP;
    private javax.swing.JTextField vp;
    // End of variables declaration//GEN-END:variables
}
